<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/data_process/clean_data.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/data_process/clean_data.py" />
              <option name="originalContent" value="import os&#10;&#10;# 删除多余的图片和标签&#10;&#10;# 获取项目根目录（假设 data_process 和 ISICDM2025_dataset 同级）&#10;PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))&#10;&#10;# 路径配置&#10;img_dir = os.path.join(PROJECT_ROOT, &quot;ISICDM2025_dataset&quot;, &quot;images&quot;, &quot;train&quot;)&#10;label_dir = os.path.join(PROJECT_ROOT, &quot;ISICDM2025_dataset&quot;, &quot;labels&quot;, &quot;train&quot;)&#10;&#10;print(&quot;\n处理训练集...&quot;)&#10;# 获取图片和标签的基础名集合&#10;img_set = set(os.path.splitext(f)[0] for f in os.listdir(img_dir) if f.lower().endswith('.png'))&#10;label_set = set(os.path.splitext(f)[0] for f in os.listdir(label_dir) if f.lower().endswith('.txt'))&#10;# 有标签但无图片&#10;label_no_img = label_set - img_set&#10;# 有图片但无标签&#10;img_no_label = img_set - label_set&#10;&#10;print(f&quot;有标签但无图片的数量: {len(label_no_img)}&quot;)&#10;print(&quot;有标签但无图片的文件名和所有类别:&quot;)&#10;for name in sorted(label_no_img):&#10;    txt_path = os.path.join(label_dir, name + &quot;.txt&quot;)&#10;    try:&#10;        with open(txt_path, &quot;r&quot;, encoding=&quot;utf-8&quot;) as f:&#10;            lines = f.readlines()&#10;        if lines:&#10;            for idx, line in enumerate(lines):&#10;                parts = line.strip().split()&#10;                if parts:&#10;                    print(f&quot;{name}.txt 第{idx+1}行: 类别标签 {parts[0]}&quot;)&#10;                else:&#10;                    print(f&quot;{name}.txt 第{idx+1}行: 空行&quot;)&#10;        else:&#10;            print(f&quot;{name}.txt: 空文件&quot;)&#10;        # 删除标签文件&#10;        os.remove(txt_path)&#10;        print(f&quot;已删除标签: {name}.txt&quot;)&#10;    except Exception as e:&#10;        print(f&quot;读取或删除失败: {name}.txt, 错误: {e}&quot;)&#10;&#10;print(f&quot;有图片但无标签的数量: {len(img_no_label)}&quot;)&#10;print(&quot;有图片但无标签的文件名:&quot;)&#10;for name in sorted(img_no_label):&#10;    img_path = os.path.join(img_dir, name + &quot;.png&quot;)&#10;    if os.path.exists(img_path):&#10;        try:&#10;            os.remove(img_path)&#10;            print(f&quot;已删除图片: {name}.png&quot;)&#10;        except Exception as e:&#10;            print(f&quot;删除失败: {name}.png, 错误: {e}&quot;)&#10;    else:&#10;        print(f&quot;图片不存在: {name}.png&quot;)&#10;" />
              <option name="updatedContent" value="import os&#10;&#10;# 删除多余的图片和标签&#10;&#10;# 获取项目根目录（假设 data_process 和 ISICDM2025_dataset 同级）&#10;PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))&#10;&#10;# 路径配置&#10;img_dir = os.path.join(PROJECT_ROOT, &quot;ISICDM2025_dataset&quot;, &quot;images&quot;, &quot;train&quot;)&#10;label_dir = os.path.join(PROJECT_ROOT, &quot;ISICDM2025_dataset&quot;, &quot;labels&quot;, &quot;train&quot;)&#10;&#10;print(&quot;\n处理训练集...&quot;)&#10;# 获取图片和标签的基础名集合&#10;img_set = set(os.path.splitext(f)[0] for f in os.listdir(img_dir) if f.lower().endswith('.png'))&#10;label_set = set(os.path.splitext(f)[0] for f in os.listdir(label_dir) if f.lower().endswith('.txt'))&#10;# 有标签但无图片&#10;label_no_img = label_set - img_set&#10;# 有图片但无标签&#10;img_no_label = img_set - label_set&#10;&#10;print(f&quot;有标签但无图片的数量: {len(label_no_img)}&quot;)&#10;print(&quot;有标签但无图片的文件名和所有类别:&quot;)&#10;for name in sorted(label_no_img):&#10;    txt_path = os.path.join(label_dir, name + &quot;.txt&quot;)&#10;    try:&#10;        with open(txt_path, &quot;r&quot;, encoding=&quot;utf-8&quot;) as f:&#10;            lines = f.readlines()&#10;        if lines:&#10;            for idx, line in enumerate(lines):&#10;                parts = line.strip().split()&#10;                if parts:&#10;                    print(f&quot;{name}.txt 第{idx+1}行: 类别标签 {parts[0]}&quot;)&#10;                else:&#10;                    print(f&quot;{name}.txt 第{idx+1}行: 空行&quot;)&#10;        else:&#10;            print(f&quot;{name}.txt: 空文件&quot;)&#10;        # 删除标签文件&#10;        os.remove(txt_path)&#10;        print(f&quot;已删除标签: {name}.txt&quot;)&#10;    except Exception as e:&#10;        print(f&quot;读取或删除失败: {name}.txt, 错误: {e}&quot;)&#10;&#10;print(f&quot;有图片但无标签的数量: {len(img_no_label)}&quot;)&#10;print(&quot;有图片但无标签的文件名:&quot;)&#10;for name in sorted(img_no_label):&#10;    img_path = os.path.join(img_dir, name + &quot;.png&quot;)&#10;    if os.path.exists(img_path):&#10;        try:&#10;            os.remove(img_path)&#10;            print(f&quot;已删除图片: {name}.png&quot;)&#10;        except Exception as e:&#10;            print(f&quot;删除失败: {name}.png, 错误: {e}&quot;)&#10;    else:&#10;        print(f&quot;图片不存在: {name}.png&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/data_process/count_lables.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/data_process/count_lables.py" />
              <option name="originalContent" value="import os&#10;from collections import Counter, defaultdict&#10;import matplotlib.pyplot as plt&#10;&#10;def analyze_labels(label_root, num_classes, class_names=None, save_fig=True):&#10;    stats = defaultdict(int)&#10;&#10;    # 统计 train/val&#10;    for split in [&quot;train&quot;, &quot;val&quot;]:&#10;        split_dir = os.path.join(label_root, split)&#10;        if not os.path.exists(split_dir):&#10;            print(f&quot;{split_dir} 不存在，跳过&quot;)&#10;            continue&#10;&#10;        count = Counter()&#10;        n_files = 0&#10;&#10;        for file in os.listdir(split_dir):&#10;            if not file.endswith(&quot;.txt&quot;):&#10;                continue&#10;            n_files += 1&#10;            with open(os.path.join(split_dir, file), &quot;r&quot;) as f:&#10;                lines = f.readlines()&#10;                for line in lines:&#10;                    cls = int(line.strip().split()[0])&#10;                    count[cls] += 1&#10;&#10;        print(f&quot;\n数据集划分: {split} (共 {n_files} 张图片)&quot;)&#10;        for i in range(num_classes):&#10;            name = class_names[i] if class_names else str(i)&#10;            print(f&quot;  类别 {i} ({name}): {count[i]} 个标注&quot;)&#10;            stats[i] += count[i]&#10;&#10;    print(&quot;\n=== 全部数据集类别分布 ===&quot;)&#10;    for i in range(num_classes):&#10;        name = class_names[i] if class_names else str(i)&#10;        print(f&quot;类别 {i} ({name}): {stats[i]} 个标注&quot;)&#10;&#10;    # 画柱状图&#10;    labels = [class_names[i] if class_names else str(i) for i in range(num_classes)]&#10;    values = [stats[i] for i in range(num_classes)]&#10;&#10;    plt.figure(figsize=(10, 6))&#10;    plt.bar(labels, values, color=&quot;skyblue&quot;, edgecolor=&quot;black&quot;)&#10;    plt.xlabel(&quot;category&quot;)&#10;    plt.ylabel(&quot;number&quot;)&#10;    plt.title(&quot;Class Distribution&quot;)&#10;    plt.xticks(rotation=45)&#10;    plt.tight_layout()&#10;&#10;    if save_fig:&#10;        debug_dir = os.path.join(PROJECT_ROOT, &quot;debug&quot;)&#10;        os.makedirs(debug_dir, exist_ok=True)&#10;        save_path = os.path.join(debug_dir, &quot;class_distribution1.png&quot;)&#10;        plt.savefig(save_path)&#10;        print(f&quot;\n柱状图已保存到 {save_path}&quot;)&#10;    else:&#10;        plt.show()&#10;&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    # 获取项目根目录（假设 data_process 和 ISICDM2025_dataset 同级）&#10;    PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))&#10;    dataset_root = os.path.join(PROJECT_ROOT, &quot;ISICDM2025_dataset&quot;, &quot;labels&quot;)&#10;    num_classes = 7&#10;    class_names = [&#10;        &quot;BI-RADS-0&quot;, &quot;BI-RADS-1&quot;, &quot;BI-RADS-2&quot;,&#10;        &quot;BI-RADS-3&quot;, &quot;BI-RADS-4&quot;, &quot;BI-RADS-5&quot;, &quot;BI-RADS-6&quot;&#10;    ]&#10;&#10;    analyze_labels(dataset_root, num_classes, class_names, save_fig=True)&#10;" />
              <option name="updatedContent" value="import os&#10;from collections import Counter, defaultdict&#10;import matplotlib.pyplot as plt&#10;&#10;def analyze_labels(label_root, num_classes, class_names=None, save_fig=True):&#10;    stats = defaultdict(int)&#10;&#10;    # 统计 train/val&#10;    for split in [&quot;train&quot;, &quot;val&quot;]:&#10;        split_dir = os.path.join(label_root, split)&#10;        if not os.path.exists(split_dir):&#10;            print(f&quot;{split_dir} 不存在，跳过&quot;)&#10;            continue&#10;&#10;        count = Counter()&#10;        n_files = 0&#10;&#10;        for file in os.listdir(split_dir):&#10;            if not file.endswith(&quot;.txt&quot;):&#10;                continue&#10;            n_files += 1&#10;            with open(os.path.join(split_dir, file), &quot;r&quot;) as f:&#10;                lines = f.readlines()&#10;                for line in lines:&#10;                    cls = int(line.strip().split()[0])&#10;                    count[cls] += 1&#10;&#10;        print(f&quot;\n数据集划分: {split} (共 {n_files} 张图片)&quot;)&#10;        for i in range(num_classes):&#10;            name = class_names[i] if class_names else str(i)&#10;            print(f&quot;  类别 {i} ({name}): {count[i]} 个标注&quot;)&#10;            stats[i] += count[i]&#10;&#10;    print(&quot;\n=== 全部数据集类别分布 ===&quot;)&#10;    for i in range(num_classes):&#10;        name = class_names[i] if class_names else str(i)&#10;        print(f&quot;类别 {i} ({name}): {stats[i]} 个标注&quot;)&#10;&#10;    # 画柱状图&#10;    labels = [class_names[i] if class_names else str(i) for i in range(num_classes)]&#10;    values = [stats[i] for i in range(num_classes)]&#10;&#10;    plt.figure(figsize=(10, 6))&#10;    plt.bar(labels, values, color=&quot;skyblue&quot;, edgecolor=&quot;black&quot;)&#10;    plt.xlabel(&quot;category&quot;)&#10;    plt.ylabel(&quot;number&quot;)&#10;    plt.title(&quot;Class Distribution&quot;)&#10;    plt.xticks(rotation=45)&#10;    plt.tight_layout()&#10;&#10;    if save_fig:&#10;        debug_dir = os.path.join(PROJECT_ROOT, &quot;debug&quot;)&#10;        os.makedirs(debug_dir, exist_ok=True)&#10;        save_path = os.path.join(debug_dir, &quot;class_distribution1.png&quot;)&#10;        plt.savefig(save_path)&#10;        print(f&quot;\n柱状图已保存到 {save_path}&quot;)&#10;    else:&#10;        plt.show()&#10;&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    # 获取项目根目录（假设 data_process 和 ISICDM2025_dataset 同级）&#10;    PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))&#10;    dataset_root = os.path.join(PROJECT_ROOT, &quot;ISICDM2025_dataset&quot;, &quot;labels&quot;)&#10;    num_classes = 7&#10;    class_names = [&#10;        &quot;BI-RADS-0&quot;, &quot;BI-RADS-1&quot;, &quot;BI-RADS-2&quot;,&#10;        &quot;BI-RADS-3&quot;, &quot;BI-RADS-4&quot;, &quot;BI-RADS-5&quot;, &quot;BI-RADS-6&quot;&#10;    ]&#10;&#10;    analyze_labels(dataset_root, num_classes, class_names, save_fig=True)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/data_process/file_count.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/data_process/file_count.py" />
              <option name="originalContent" value="import os&#10;# 统计标签与图片对应情况&#10;&#10;# 获取项目根目录（假设 data_process 和 ISICDM2025_dataset 同级）&#10;PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))&#10;&#10;# 统计训练集和验证集图片数量&#10;train_dir = os.path.join(PROJECT_ROOT, &quot;ISICDM2025_dataset&quot;, &quot;images&quot;, &quot;train&quot;)&#10;val_dir = os.path.join(PROJECT_ROOT, &quot;ISICDM2025_dataset&quot;, &quot;images&quot;, &quot;val&quot;)&#10;&#10;train_imgs = [f for f in os.listdir(train_dir) if f.lower().endswith('.png')]&#10;val_imgs = [f for f in os.listdir(val_dir) if f.lower().endswith('.png')]&#10;&#10;print(f&quot;训练集图片数量: {len(train_imgs)}&quot;)&#10;print(f&quot;验证集图片数量: {len(val_imgs)}&quot;)&#10;&#10;# 统计训练集和验证集标签数量&#10;train_label_dir = os.path.join(PROJECT_ROOT, &quot;ISICDM2025_dataset&quot;, &quot;labels&quot;, &quot;train&quot;)&#10;val_label_dir = os.path.join(PROJECT_ROOT, &quot;ISICDM2025_dataset&quot;, &quot;labels&quot;, &quot;val&quot;)&#10;train_labels = [f for f in os.listdir(train_label_dir) if f.lower().endswith('.txt')]&#10;val_labels = [f for f in os.listdir(val_label_dir) if f.lower().endswith('.txt')]&#10;&#10;print(f&quot;训练集标签数量: {len(train_labels)}&quot;)&#10;print(f&quot;验证集标签数量: {len(val_labels)}&quot;)&#10;" />
              <option name="updatedContent" value="import os&#10;# 统计标签与图片对应情况&#10;&#10;# 获取项目根目录（假设 data_process 和 ISICDM2025_dataset 同级）&#10;PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))&#10;&#10;# 统计训练集和验证集图片数量&#10;train_dir = os.path.join(PROJECT_ROOT, &quot;ISICDM2025_dataset&quot;, &quot;images&quot;, &quot;train&quot;)&#10;val_dir = os.path.join(PROJECT_ROOT, &quot;ISICDM2025_dataset&quot;, &quot;images&quot;, &quot;val&quot;)&#10;&#10;train_imgs = [f for f in os.listdir(train_dir) if f.lower().endswith('.png')]&#10;val_imgs = [f for f in os.listdir(val_dir) if f.lower().endswith('.png')]&#10;&#10;print(f&quot;训练集图片数量: {len(train_imgs)}&quot;)&#10;print(f&quot;验证集图片数量: {len(val_imgs)}&quot;)&#10;&#10;# 统计训练集和验证集标签数量&#10;train_label_dir = os.path.join(PROJECT_ROOT, &quot;ISICDM2025_dataset&quot;, &quot;labels&quot;, &quot;train&quot;)&#10;val_label_dir = os.path.join(PROJECT_ROOT, &quot;ISICDM2025_dataset&quot;, &quot;labels&quot;, &quot;val&quot;)&#10;train_labels = [f for f in os.listdir(train_label_dir) if f.lower().endswith('.txt')]&#10;val_labels = [f for f in os.listdir(val_label_dir) if f.lower().endswith('.txt')]&#10;&#10;print(f&quot;训练集标签数量: {len(train_labels)}&quot;)&#10;print(f&quot;验证集标签数量: {len(val_labels)}&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>